function void add_information_of_factor (const series factor, bundle *self)
    /*  Gather information of factor series. */

    series self.factor_series = factor
    matrix self.factor_values = values(factor)
    scalar self.n_factors = nelem(self.factor_values)

    bundle b = getinfo(factor)
    if b.has_string_table
        strings self.factor_str_values = strvals(factor)
    endif
end function

function scalar PairPlot (const list L "List of variables to plot",
                          const series factor[null] "Discrete series for factorization",
                          bundle opts[null] "Set options through bundle")
    /* Main public function.
    return: TRUE on error, otherwise FALSE. */

    bundle self = exists(opts) ? opts : _()
    self = self + default_options()
    self.n_variables = nelem(L)

    # Some checks
    if self.filename == ""
        printf "\nError: Invalid file name.\n"
        return TRUE
    elif self.n_variables < 2
        printf "\nError: List of variables must comprise at least two series.\n"
        return TRUE
    endif

    # Adjust fontsize as a function of the number of variables
    if !exists(opts) || inbundle(opts, "fontsize") == FALSE
        self.fontsize = calculate_fontsize(self.fontsize, self.n_variables)
    endif
    if !exists(opts) || inbundle(opts, "key_fontsize") == FALSE
        self.key_fontsize = calculate_fontsize(self.key_fontsize, self.n_variables)
    endif
    if !exists(opts) || inbundle(opts, "tics_fontsize") == FALSE
        self.tics_fontsize = calculate_fontsize(self.tics_fontsize, self.n_variables)
    endif
    if !exists(opts) || inbundle(opts, "pointsize") == FALSE
        self.pointsize = calculate_pointsize(self.pointsize, self.n_variables)
    endif
    if !exists(opts) || inbundle(opts, "width") == FALSE
        self.width = calculate_plot_width(self.width, self.n_variables)
    endif
    if !exists(opts) || inbundle(opts, "height") == FALSE
        self.height = calculate_plot_height(self.height, self.n_variables)
    endif

    # Handle eventual missing values
    list ALL = L
    if exists(factor)
        ALL += factor
    endif
    smpl ALL --no-missing

    # Set some global(s)
    string self.plot_type = self.use_circles ? "circles" : "points"
    self.n_plots = get_n_plots(self.type, self.n_variables)

    if exists(factor)
        add_information_of_factor(factor, &self)
    else
        scalar self.n_factors = 1
        matrix self.factor_values = {1}
    endif
    if !isok_length_pointtype_vector(self)
        return TRUE
    endif

    string filename = self.filename

    if self.n_plots > 1
        return call_gridplot(L, self, filename)
    else
        return call_gnuplot(L, self, filename)
    endif
end function

function bundle PP_ui_maker (void)
    /* set a specification for the first argument for GUI_PairPlot */

    bundle b
    b.L = _(no_singleton=1, n_const=1)
    return b
end function

function void GUI_PairPlot (const list L "List of series to plot",
                            const series factor[null] "Discrete series for factorization",
                            int type[1:4:1] "Plot type" {"triangle", "matrix", "row", "column"},
                            int centroids[1:3:1] "Centroids" {"none", "mean", "median"},
                            scalar transparency[0:1:0:0.1] "Transparency")
    /* Callback for PairPlot menu item. */

    bundle opts
    strings typestrs = defarray("triangle", "matrix", "row", "column")
    strings cstrs = defarray("none", "mean", "median")

    opts.type = typestrs[type]
    opts.centroid = cstrs[centroids]
    opts.transparency_level = 255 * transparency
    PairPlot(L, factor, opts)
end function

function scalar isok_length_pointtype_vector (const bundle self)
    /* Make sure the 'pointtype' vector has at least as many elements as
       there are distinct factor values. Return TRUE if so, FALSE otherwise
    */
    if inbundle(self, "n_factors") && nelem(self.pointtype) < self.n_factors
        printf "\nError: 'factor' series has %d distinct values but you\n"
        printf "have set a vector 'pointtype' with only %d elements. Abort.\n\n",
          self.n_factors, nelem(self.pointtype)
        return FALSE
    endif

    return TRUE
end function

function bundle default_options (void)
    /* Default parameter values. */

    bundle self

    scalar self.height = 600
    scalar self.width = 900
    scalar self.fontsize = 16
    scalar self.pointsize = 2
    matrix self.pointtype = {6; 4; 7; 15; 13; 11; 8; 5; 1; 2; 14; 3; 9; 10; 12; 14}
    scalar self.offset_level = 0.02
    scalar self.with_key = 1	# print distinct values of factor variable
    string self.key_position = "top left"	# position of legend
    scalar self.key_fontsize = 14
    scalar self.use_circles = FALSE
    scalar self.tics_fontsize = 12
    scalar self.transparency_level = 90
    string self.type = "triangle"
    scalar self.tics = TRUE		 # print no x/y tics
    scalar self.grid = FALSE     # add grid (works only if self.tics=1) - not supported!
    string self.centroid = "none"
    scalar self.centroid_label = FALSE
    scalar self.centroid_pointsize = 2
    scalar self.centroid_linewidth = 2
    string self.filename = "display"
    scalar self.y_logscale = NA
    scalar self.x_logscale = NA

    return self
end function

function string write_pp_plots (const list L,
                                const bundle self,
                                const string gp_opts)
    /* Common code for the single-plot and multiplot cases.
       - In the single case we construct one plot-specification buffer
       and pass it back to call_gnuplot() for execution.
       - In the multiplot case we construct two or more plot specs and
       pass them in turn to gretl's "gnuplot" command, in the context
       of a gpbuild block in call_gridplot(). In this case the return
       value of @buffer is ignored.
    */

    scalar tri = self.type == "triangle"
    string buffer = ""
    scalar n = nelem(L)
    scalar imin = tri ? 2 : 1
    scalar jmax = n
    scalar k = 0

    set force_decpoint on

    loop i=imin..n
        if tri
            jmax = i-1
        endif
        loop j=1..jmax
            if j == i
                continue
            endif
            k++
            buffer = ""
            list xy = L[j] L[i]
            strings vnames = varnames(xy)
            outfile --buffer=buffer
                write_options(self, xy, k)
                write_labels(vnames, self.fontsize)
                if self.centroid != "none"
                    factorized_centroids(xy, self)
                endif
                write_plot_cmd(self)
                write_plot_data(xy, self)
            end outfile
            if self.n_plots > 1 # using gridplot
                gnuplot --inbuf=buffer @gp_opts
            endif
        endloop
        if k == self.n_plots
            break
        endif
    endloop

    set force_decpoint off

    return buffer
end function

function void factorized_centroids (const list xy, bundle self)
    strings colors = get_color_definitions()

    loop i=1..self.n_factors
        smpl full
        if self.n_factors > 1
            smpl self.factor_series == self.factor_values[i] --restrict
        endif
        smpl --no-missing xy

        scalar self.ith_factor = i
        write_centroids(xy, self, colors)
    endloop
end function

function void write_centroids (const list xy, const bundle self,
                               const strings colors)
    matrix cxy = zeros(1, 2)
    string label = ""

    if self.centroid == "mean"
        cxy = {mean(xy[1]), mean(xy[2])}
        if self.centroid_label
            label = "Mean"
        endif
    else
        cxy = {median(xy[1]), median(xy[2])}
        if self.centroid_label
            label = "Median"
        endif
    endif

    if self.n_factors == 1 # no factors
        string color = "FF0000"
    else
        string color = colors[self.ith_factor]
    endif

    # Draw a symbol (optionally with a label) for the i-th centroid
    printf "set label %d \"%s\" at %g,%g point ps %g pt %d lw %g",
      self.ith_factor, label, cxy[1], cxy[2], self.centroid_pointsize,
      self.pointtype[self.ith_factor], self.centroid_linewidth
    # Color of centroid equals the color of the i-th factor
    printf " lc rgb '#%s' front\n", color
end function

function void write_labels (const strings vnames, const int fontsize)
    printf "set xlabel '%s' font ',%d'\n", vnames[1], fontsize
    printf "set ylabel '%s' font ',%d'\n", vnames[2], fontsize
end function

function void write_plot_data (const list xy, const bundle self)
    /* Write data for a single subplot. */

    loop i=1..self.n_factors -q
        smpl full
        if self.n_factors > 1
            smpl self.factor_series == self.factor_values[i] --restrict
        endif
        smpl --no-missing xy

        matrix m = {xy}     # TODO: for huge data, this may become a bottleneck
        cnameset(m, "")     # avoid printing variable names to the gp-file
        printf "%14.8g", m  # width 14 to avoid collisions
        printf "e\n"
    endloop
end function

function void print_using_cmd (const bundle self, const int idx)
    /* Print gnuplot data details. */

    printf "'-' using 1:2 w %s", self.plot_type

    if self.plot_type == "points"
        printf " pt %d", self.pointtype[idx]
    endif
end function

function void print_factor_title (const bundle self, const int idx)
    /* Print title string for a factor. */

    if inbundle(self, "factor_str_values")
        # If factor series comprises strings, these are used
        printf " title '%s'", self.factor_str_values[idx]
    else
        if self.n_factors == 1
            print " notitle"
        else
            printf " title 'F=%d'", self.factor_values[idx]
        endif
    endif
end function

function void write_plot_cmd (const bundle self)
    /* Compile gnuplot initial commands. */

    printf "plot \\\n"

    loop i=1..self.n_factors
        print_using_cmd(self, $i)
        print_factor_title(self, $i)

        if i < self.n_factors
            printf ", \\\n"
        else
            printf "\n"
        endif
    endloop
end function

function void write_offsets (const scalar offset_level)
    /* Write settings for offsets */

    printf "set offsets "
    loop i=1..4
        printf "%.2f", offset_level
        printf "%s", i < 4 ? ", " : ""
    endloop
    printf "\n"
end function

function void write_key_spec (const bundle self, const list xy,
                              scalar k)
    string pos = self.key_position
    scalar do_font = 1

    if self.type == "triangle" && self.n_plots > 2
        /* We can avoid collision between the key and actual data
           points by writing the key into a blank region of the grid,
           for the first plot only. In this case use the regular
           plot font.
        */
        if k == 1
            pos = "at screen 0.6, screen 0.95"
            do_font = 0
        else
            pos = ""
        endif
    elif self.type == "matrix" && self.n_plots > 4
        /* Write just one key (?), and try for best position to
           avoid collision with data
        */
        if k == 1
            if pos == "top left" && corr(xy[1], xy[2]) < -0.2
                pos = "top right"
            endif
        else
            pos = ""
        endif
    endif

    if pos == ""
        printf "set nokey\n"
    elif do_font == 0
        printf "set key %s\n", pos
    else
        printf "set key %s font ',%d'\n", pos, self.key_fontsize
    endif
end function

function void write_options (const bundle self, const list xy,
                             scalar k)
    /* Write gnuplot options. */

    write_offsets(self.offset_level)

    if self.with_key
        write_key_spec(self, xy, k)
    else
        printf "set nokey\n"
    endif
    if self.tics
        printf "set xtics font ',%d'\n", self.tics_fontsize
        printf "set ytics font ',%d' \n", self.tics_fontsize
    else
        printf "set noxtics\n"
        printf "set noytics\n"
    endif
    if self.grid
        printf "set style line 12 lc rgb '#808080' lt 0 lw 1\n"
        printf "set grid ls 12\n"
    endif
    printf "set pointsize %g\n", self.pointsize

    # Not documented yet, as it errors
    /*
       if ok(self.y_logscale)
       printf "set logscale y %d\n", self.y_logscale
       endif
       if ok(self.x_logscale)
       printf "set logscale x %d\n", self.x_logscale
       endif
    */
end function

function strings get_color_definitions (void)
    # "dark2" palette
    return defarray("1B9E77", "D95F02", "7570B3", "E7298A", "66A61E",
      "E6AB02", "A6761D", "666666", "C41E3A", "4682B4", "FFBF00", "FF0000",
      "00CC00", "8FAAB3", "0000FF", "BF25B2", "FFA500")
end function

function scalar calculate_pointsize (const scalar default_pointsize,
                                     const int n_variables)
    /* Compute optimal fontsizeo as a function of the number
    of variables to plot. */

    scalar pointsize = xmin(5, default_pointsize / sqrt(n_variables))

    return pointsize
end function

function scalar calculate_fontsize (const scalar default_fontsize,
                                    const int n_variables)
    /* Compute optimal fontsizeo as a function of the number
    of variables to plot. */

    scalar fontsize = xmin(20, default_fontsize / sqrt(n_variables))

    return ceil(fontsize)
end function


function scalar calculate_plot_width (const scalar default_width,
                                      const int n_variables)
    /* Compute optimal width of plot as a function of the number
    of variables to plot. */

    scalar width = xmin(2800, default_width * (1 + sqrt(n_variables)/20))

    return int(width)
end function

function scalar calculate_plot_height (const scalar default_height,
                                       const int n_variables)
    /* Compute optimal height of plot as a function of the number
    of variables to plot. */

    scalar height = xmin(2800, default_height * (1 + sqrt(n_variables)/20))

    return int(height)
end function

function scalar get_n_plots (const string type, int nvars)
    /* Figure the total number of plots required. */

    scalar n1 = nvars - 1

    if type == "triangle"
        return n1 * nvars / 2
    elif type == "matrix"
        return n1 * nvars
    else # row or column
        return n1
    endif
end function

function matrix get_layout_matrix (int n)
    /* construct a suitable triangular layout matrix */

    matrix ret = zeros(n, n)
    scalar k = 1
    loop i=1..n
        loop j=1..i
            ret[i,j] = k++
        endloop
    endloop
    return ret
end function

function string get_gp_opts (const bundle self)
    /* construct an options string for gretl's "gnuplot" command */

    string opts = ""
    if self.transparency_level > 0
        set force_decpoint on
        opts += sprintf("--alpha=%g", self.transparency_level / 255)
        set force_decpoint off
    endif
    # FIXME font size choice?
    return opts
end function

function string get_gridplot_opts (const bundle self)
    /* construct an options string for the "gridplot" command */

    strings S = array(0)
    string opts = ""

    if self.type == "triangle"
        S += "--layout=lmat"
    elif self.type == "row"
        S += "--rows=1"
    elif self.type == "column"
        S += "--cols=1"
    endif
    if self.width != 800
        S += sprintf("--width=%d", self.width)
    endif
    if self.height != 600
        S += sprintf("--height=%d", self.height)
    endif
    if inbundle(self, "title")
        S += sprintf("--title=\"%s\"", self.title)
    endif

    if nelem(S) > 0
        opts = S[1]
    endif
    loop i=2..nelem(S)
        opts += " "
        opts += S[i]
    endloop

    return opts
end function

function scalar call_gridplot (const list L, const bundle self,
                               const string outspec)
    /* Called if there's more than one component plot. */

    string gp_opts = get_gp_opts(self)
    string grid_opts = get_gridplot_opts(self)
    matrix lmat

    if self.type == "triangle"
        lmat = get_layout_matrix(nelem(L) - 1)
    endif

    gpbuild plotspecs
        write_pp_plots(L, self, gp_opts)
    end gpbuild

    catch gridplot plotspecs @grid_opts --output="@outspec"
    scalar err = $error
    if err
        printf "Error in call_gridplot: %s\n", errmsg(err)
    endif
    return err
end function

function scalar call_gnuplot (const list L, const bundle self,
                              const string outspec)
    /* Called if just a single plot is to be produced. */

    string buffer = write_pp_plots(L, self, "")
    string gp_opts = get_gp_opts(self)

    catch gnuplot --inbuf=buffer @gp_opts --output="@outspec"
    scalar err = $error
    if err
        printf "Error in call_gnuplot: %s\n", errmsg(err)
    endif
    return err
end function



